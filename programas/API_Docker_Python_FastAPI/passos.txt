 #1 Instalar pyenv e iniciar o espaço virtual: 
>>Iniciar espaço: python -m venv workoutapip (python -m venv [nome da api])
>>Conferir se ele existe: workoutapip\Scripts\activate.bat
>>Ativar espaço: workoutapip\Scripts\activate

 #2 Instalar pacotes básicos 
>> pip install fastapi uvicorn sqlalchemy pydantic
    # Sobre os pacotes:
    - **fastapi**: framework moderno e rápido para criar APIs web em Python, com suporte a tipagem, validação automática e documentação interativa.
    - **uvicorn**: servidor ASGI leve e rápido, usado para rodar aplicações FastAPI em produção ou desenvolvimento.
    - **sqlalchemy**: biblioteca de ORM (Object Relational Mapper) que facilita a comunicação entre Python e bancos de dados relacionais, permitindo manipular dados como objetos.
    - **pydantic**: biblioteca para validação de dados e criação de modelos baseados em tipos Python, muito usada no FastAPI para garantir dados corretos nas requisições e respostas.


#3 Criar arquivos .py em workout_api e acessar a pasta. E nela, rode:
>> uvicorn workout_api.main:app --reload
     # Isso vai iniciar o servidor FastAPI. Acesse http://127.0.0.1:8000/docs para ver a documentação interativa.

# Passo a passo completo para criar e rodar a API:
1. Crie um ambiente virtual na raiz do projeto:
    ```cmd
    python -m venv workoutapip
    ```
2. Ative o ambiente virtual:
    ```cmd
    workoutapip\Scripts\activate
    ```
3. Instale os pacotes necessários:
    ```cmd
    pip install fastapi uvicorn sqlalchemy pydantic
    ```
4. Estruture o projeto criando a pasta `workout_api` e os arquivos principais (`main.py`, `routers.py`, etc). Exemplo de main.py:
    ```python
    from fastapi import FastAPI
    from workout_api.routers import api_router

    app = FastAPI(title='WorkoutApi')
    app.include_router(api_router)

    if __name__ == '__main__':
         import uvicorn
         uvicorn.run('workout_api.main:app', host='0.0.0.0', port=8000, log_level='info', reload=True)
    ```
5. Para rodar o servidor, estando na pasta do projeto, execute:
    ```cmd
    uvicorn workout_api.main:app --reload
    ```
    # O parâmetro --reload reinicia o servidor automaticamente ao salvar alterações.
6. Acesse a documentação interativa em:
    http://127.0.0.1:8000/docs

# Dicas:
- O comando `uvicorn main:app --reload` só funciona se você estiver dentro da pasta workout_api. O mais seguro é sempre usar o caminho completo do módulo: `uvicorn workout_api.main:app --reload`.
- O Makefile pode ser usado para facilitar o comando de execução. Corrija o Makefile para:
  ```makefile
  run:
  	@uvicorn workout_api.main:app --reload
  ```
- Para adicionar novos módulos (ex: atleta, centro_treinamento), crie as pastas e arquivos necessários e inclua os routers em `routers.py`.

 #4 Acesse http://127.0.0.1:8000/docs
 #5 Crie um makefile e rodar make run
 #6 Criar schemas com base no diagrama
 #7 Criar pasta atleta
 >> Arquivo __init__.py e schemas.py