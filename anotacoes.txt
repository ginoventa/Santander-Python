Modo interativo
    Maneira de testar suas variáveis e scripts antes mesmo
    de rodar o código 
    Existem duas maneiras de fazer isso: 
        1. Ambiente interativo genérico: 'python' no terminal
        2. Ambiente interativo para programa: 'python nome.python'
        no termina. 
    Além disso temos os comandos: dir() e help(), que aceitam
    parâmetros e nos informam as bibliotecas usadas por um objeto,
    e como utilizá-las, respectivamente. 

Variáveis   
    Declarações: 
        1. age = 23 
           name = ' Guilherme'
        2. age, name = (23, 'Guilherme')
    Tipos: 
        Python NÃO TEM constantes - normalmente usamos letras maiúsculas
        para convencionar isso. 
    Inteiros: 
        Dividir com // mantém o estado de inteiro de um número. 

Print: 
    Podemos adicionar como será formatado o final. 
        print(...,..., end='\n') -- pula linha após exibir todas as variáveis
    Podemos adicionar como as variáveis serão separadas.
        print(...,...,sep='#')

Operadores Lógicos:
    Usamos as seguintes palavras: 
        Or, and, not, is, is not, in, not in. 
    Usamos os seguintes símbolos:
        >, <, =, (). 
If: 
   1.   if condição: 
        elif condição:
        else:
   
   2.   retorno_verdadeiro if condição else retorno_falso
        "Maior" if num>5 else "Menor"

For: 
    É usado para percorrer um objeto iterável ou para repetir 
    uma estrutura passível de repetição. 
        1. for letra in texto: 
                if letra == 'a'
                    ...
            Aqui estamos percorrendo a string texto, sendo 
            letra os valores atuais. 
    Usamos range para obter uma sequência com início e fim. 
        2. range(start, stop[,step]) -> range(i,j) --> i, ..., j-1
           list(range(stop)) -> list(range(10)) --> 0,...,9
           range(stop) --> range(9) --> 0, 9

           **List o formata como uma listagem de 0 a 9,
           formato não usado em for.
    continue: Quando encontrado dentro de um loop, o continue faz 
    com que o programa pule o restante da iteração atual e avance
    para a próxima iteração do loop. Se estivermos dentro de um loop
    for, o programa irá para o próximo valor na sequência de iteração.
    Se estivermos dentro de um loop while, o programa avalia novamente
    a condição do while e, se verdadeira, inicia a próxima iteração

            i = 0
            n = 0
            while i < 5:
            i = 1 + i
            if i == 3:
                continue
            n += i
            print(i)
    **Ele não imprime nada em i == 3, pois pula pro próximo passo da iteração 
    como existe apenas uma estrutura. s

While: 
    Pode ser usado de duas maneiras: 
    1.  while opcao != 3: 
            if opcao == 1: 
                print("Sacando...")
                break
            else:
                print("Depositando...")
                break

    2.  while opcao != 3: 
            if opcao == 1: 
                print("Sacando...")
                break
            else:
                print("Depositando...")
                break
        else: 
            print("Saindo...")

Strings: 
    Para acessar cada caractere de uma string, precisamos apenas acessá-lo como um vetor: 

        palavra[0]

    Métodos: 

        Letras 
            1. .upper() - todas maiúsculas. 
            2. .lower() - todas minúsculas. 
            3. .title() - primeira letra da string fica maiúscula. 

        Espaços brancos 
            1. .strip() - espaços da esquerda e direita.
            2. .lstrip() - apenas espaço da esquerda. 
            3. .rstrip() - apenas espaço da direita. 

        Junções e centralizações
            1. .center(numero a ocupar, caractere que estara ao redor da palavra )
                curso.center(10, "+") --> ++Python++
            2. (caractere que será a junção).join(palavra a ser juntada)
                '.'.join(curso) --> P.y.t.h.o.n
                curso.join('.') --> . 
                curso.join('...') --> . .Python.Python.
    
   Interpolação de variáveis: substituição de variáveis no método print. 
    1. Usando %
        - Compatível, porém muito complexa. 

        print("João tem %d anos" %(nome))

    2. Utilizando método 'format':
        print("Eu gosto de {} e {}!".format(banana, maca))

        print("Eu gosto de {1} e {0}!".format(maca, banana))

        print("Eu gosto de {fruta1} e {fruta2}!".format(fruta1='maca', fruta2='banana'))

        **Podemos definir um dicionário e fazer o que foi feito no passo acima, porem usando 
        .format(**frutas) --> sendo frutas o nome do dicionário

    3. Utilizando 'f strings'

        print(f"Eu gosto de {maca} e {banana}!")

    Formatação com fstring: 

        print(f"Valor de PI: {PI:.2f}") -- duas casas dps da vírgula 

        print(f"Valor de PI: {PI:10.2f}") -- duas casas dps da vírgula e 10 casas úteis antes 

    Fatiamento de strings: retorna substrings
        - [start:stop:step]
        --> start é a casa inicial 
        --> stop é a casa final 
        --> step é o obstáculo -> step = 2 --> pula de duas em duas casas


        b = "Hello, World!"
        print(b[2:5]) --> "llo,"
        print(b[:5]) --> "Hello,"
        print(b[2:]) --> "lo, World!"
        print(b[:]) --> "Hello, World!"
        print(b[::-1]) -->  # Saída: lagel é nohtyP (string invertida)


    Strings de múltiplas linhas
        Definidas informando 3 aspas simples ou dulas durante a atribuição:
            """DASDAS
            DASDASDA
            DASDASDDA"""
        **Espaços em branco são considerados

Listas: Armazenam, de maneira sequencial, qualquer tipo de objeto ou dado. 
    Criação de listas -- 
        1. Usando o construtor 'list'(iterável)
            nomes = list("python") --> ['p', 'y', 't', 'h', 'o', 'n']

        2. Usando a função 'range'
            numeros = list(range(10)) --> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

        3. Colocando valores separados por vírgulas dentro de colchetes. 
            frutas = ["uva","banana","pera"]  --> ['uva', 'banana', 'pera']

    Acessando listas - São sequencias, podemos acessar seus dados pelos índices. 
        Indices positivos: começa em 0
            frutas[0] = 'uva'
        Indices negativos: começa em -1 
            frutas[-3] = 'uva'
    
    Listas aninhadas - Listas que armazenam outras listas. 
        Matriz = [
            [1,2,3]
            [4,5,6]
            [6,7,8]
        ]

        Matriz[0][0] = 1

    Fatiamento de listas - pega valores específicos do intervalo determinado. (mesmo funcionamento das strings)

    Iteração em lista - Apenas utilizando for
        frutas = ["uva","banana","pera"]
        for fruta in frutas -- fruta admite valores de indice crescente a cada passo da iteração
    
    Enumeração - Usado para saber o índice do objeto desejado. Retorna dois valores, o da lista e um número (índice). 
        frutas = ["uva","banana","pera"]
        for indice, fruta in enumerate(frutas): 
            print(f"{indice}: {fruta}")
**precisamos ter essas duas variáveis no for, caso contrário será inútil 

    Compreensão de listas - sintaxe curta para criar nova lista baseada em uma já existente. 
    Aplicando filtro ou modificando os valores já existentes. 
        1. Filtro: complicado X facilitado
            a.  numeros = [1,2,3,4]
                pares = []

                for numero in numeros: 
                    if numero % 2 == 0: 
                        pares.append(numero)

            b.  numeros = [1,2,3,4]
                pares = [numero for numero in numeros if numero % 2 == 0]
        
        2. Modificando: complicado X facilitado
            a.  numeros = [1,2,3,4]
                quadrado = []

                for numero in numeros: 
                    quadrado.append(numero**2)

            b.  numeros = [1,2,3,4]
                quadrado = [numero**2 for numero in numeros]

    Métodos da lista: 
        1. Append: nome_lista.append(objeto) (sem retornos)
        2. Clear: nome_lista.clear() (sem retornos)
        3. Copy: nova_instancia = nome_lista.copy() (tem retornos)
        4. Count: nome_lista.count(objeto_a_ser_contado) (sem retornos)
        5. Extend: nome_lista.extend(nome_lista_a_ser_adicionada) -- Não guarda nova lista, apenas extende (sem retornos)
        6. Index: nome_lista.index(objeto_a_ser_achado) -- Retorna indice da primeira ocorrencia (sem retornos)
        7. Pop: nome_lista.pop() -- Como uma pilha, retira o último elemento adicionado (sem retornos)
        8. Reverse: nome_lista.reverse() -- Inverte lista (sem retornos)
        9. Sort: nome_lista.sort(key = {lambda x: len(x) -- função anônima, retorna o número de letras}, reverse = {true ou false} ) -- Arruma lista (sem retornos) 
        10. Sorted: sorted(nome_lista, key = {lambda x: len(x) -- função anônima, retorna o número de letras}, reverse = {true ou false} ) (tem retornos)
   
    IsInstance: Verificação de que uma estrutura é uma lista
        carros = ["gol"] 
        print(isinstance(carros, list)) --> True

Tuplas: São as 'irmãs' da lista. Porém, são imutáveis. **Podem armazenar objetos mutáveis, como as listas. 
    Criação de tuplas: 
        1. Com 'tuple' 
            tuple('python')

        2. Com valores separados por vírgulas em parentêses. 
            frutas = ('uva','abacaxi',) --> **Devemos ter última vírgula, caso contrário teremos problemas para o interpretador. 
    
    Acessando tuplas: 
        frutas[0] = frutas[-2] = 'uva'
    
    Tuplas aninhadas: Não irei repetir, o funcionamento é igual.
    Fatiamento: Também pode ser aplicado a tuplas, uma vez que só impacta nossa visualização dela.
    IsInstance: Verificação de que uma estrutura é uma tupla
        carros1 = ("Gol")
        carros = ("gol",) 
        print(isinstance(carros1, tuple)) --> False --> Precisa da vírgula 
        print(isinstance(carros, tuple)) --> True

Conjuntos: Coleção de objetos que não possui objetos repetidos. Usamos o método set para defini-los ou para eliminar itens 
        duplicados de um iterável. **Não tem ordem, ou seja, podemos ter diferentes ordem em diferentes sistemas!!

********Os conjuntos em Python não suportam indexação e nem fatiamento, caso queira acessar os seus valores é necessário converter o conjunto para lista.
            meu_conjunto = {1, 2, 3, 4, 5}

            # Tentativa de indexação (gera erro):
            # print(meu_conjunto[0]) # TypeError: 'set' object is not subscriptable

            # Convertendo para lista:
            meu_conjunto_lista = list(meu_conjunto)
            print(meu_conjunto_lista[0])  # Saída: 1

            # Convertendo para tupla:
            meu_conjunto_tupla = tuple(meu_conjunto)
            print(meu_conjunto_tupla[0]) # Saída: 1

        Criando conjuntos: 
            1. set() - Elimina duplicatas
                numeros = set([1,2,3,1,4]) --> {1,2,3,4} **Eliminou duplicações
                abacaxi = set("abacaxi") --> {"b","a","c","i","x"}
            2. Chaves - Não elimina duplicatas
                numeros = {1,2,3,4,5,6,3,1,2}
                abacaxi = {"abacaxi"}

        Função enumerate: Mesma maneira da lista

        Métodos de Set(): 
            1. Union - conjunto_a.union(conjunto_b)
            2. Intersection - conjunto_a.intersection(conjunto_b)
            3. Difference - conjunto_a.difference(conjunto_b) --> Elementos que está apenas no invocador
            4. Symetric Difference - conjunto_a.symetric_difference(conjunto_b) --> Todos os elementos que não estão na intersecção 
            5. IsSubset - conjunto_a.issubset(conjunto_b) --> Os elementos de A estão em B?
            6. IsSuperset - conjunto_a.issuperset(conjunto_b) --> Os elementos de B estão em A?
            7. IsDisjoint - conjunto_a.isdisjoint(conjunto_b) --> Todos os elementos de B não estão em A?
            8. Add - conjunto_a.add(elemento) --> Adiciona elementos não existentes. 
            9. Clear
            10. Copy
            11. Discard - conjunto_a.discard(elemento) --> Descarta certo elemento, não da  erros com não existentes. 
            12. Pop - Tira os primeiros valores, oq é incomum!!!!!!!!!!!!
            13. Remove - conjunto_a.remove(elemento) --> Mesmo que discar, porém dá erros quando elemento não existe. 
            14. Len - conjunto_a.len() --> Tamanho da estrutura
